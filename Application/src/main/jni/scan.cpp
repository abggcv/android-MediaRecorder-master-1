/* DO NOT EDIT THIS FILE - it is machine generated */
#include "com_example_android_mediarecorder_MainActivity.h"
#include <android/log.h>
#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/imgproc/imgproc_c.h>
#include <android/bitmap.h>
#define APPNAME "Scanner"
using namespace cv;


#define LOG_TAG "Scanner"
#define LOGI(...) __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
#define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__))




jobject mat_to_bitmap(JNIEnv * env, Mat & src, bool needPremultiplyAlpha, jobject bitmap_config){
    jclass java_bitmap_class = (jclass)env->FindClass("android/graphics/Bitmap");
    jmethodID mid = env->GetStaticMethodID(java_bitmap_class,
                                           "createBitmap", "(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;");
    
    jobject bitmap = env->CallStaticObjectMethod(java_bitmap_class,
                                                 mid, src.size().width, src.size().height, bitmap_config);
    AndroidBitmapInfo  info;
    void*              pixels = 0;
    
    try {
        CV_Assert(AndroidBitmap_getInfo(env, bitmap, &info) >= 0);
        CV_Assert(src.type() == CV_8UC1 || src.type() == CV_8UC3 || src.type() == CV_8UC4);
        CV_Assert(AndroidBitmap_lockPixels(env, bitmap, &pixels) >= 0);
        CV_Assert(pixels);
        if(info.format == ANDROID_BITMAP_FORMAT_RGBA_8888){
            Mat tmp(info.height, info.width, CV_8UC4, pixels);
            if(src.type() == CV_8UC1){
                cvtColor(src, tmp, CV_GRAY2RGBA);
            }else if(src.type() == CV_8UC3){
                cvtColor(src, tmp, CV_RGB2RGBA);
            }else if(src.type() == CV_8UC4){
                if(needPremultiplyAlpha){
                    cvtColor(src, tmp, COLOR_RGBA2mRGBA);
                }else{
                    src.copyTo(tmp);
                }
            }
        }else{
            // info.format == ANDROID_BITMAP_FORMAT_RGB_565
            Mat tmp(info.height, info.width, CV_8UC2, pixels);
            if(src.type() == CV_8UC1){
                cvtColor(src, tmp, CV_GRAY2BGR565);
            }else if(src.type() == CV_8UC3){
                cvtColor(src, tmp, CV_RGB2BGR565);
            }else if(src.type() == CV_8UC4){
                cvtColor(src, tmp, CV_RGBA2BGR565);
            }
        }
        AndroidBitmap_unlockPixels(env, bitmap);
        return bitmap;
    }catch(cv::Exception e){
        AndroidBitmap_unlockPixels(env, bitmap);
        jclass je = env->FindClass("org/opencv/core/CvException");
        if(!je) je = env->FindClass("java/lang/Exception");
        env->ThrowNew(je, e.what());
        return bitmap;
    }catch (...){
        AndroidBitmap_unlockPixels(env, bitmap);
        jclass je = env->FindClass("java/lang/Exception");
        env->ThrowNew(je, "Unknown exception in JNI code {nMatToBitmap}");
        return bitmap;
    }
}

JNIEXPORT jobject JNICALL Java_com_example_android_mediarecorder_MainActivity_computeBrightness(JNIEnv *env, jobject thiz,
                                                                                                jobject bitmap, jdouble timestamp)
{
    //__android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Scaning getString");
    int ret;
    AndroidBitmapInfo info;
    void* pixels = 0;
    
    if ((ret = AndroidBitmap_getInfo(env, bitmap, &info)) < 0) {
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,"AndroidBitmap_getInfo() failed ! error=%d", ret);
        return NULL;
    }
    
    if (info.format != ANDROID_BITMAP_FORMAT_RGBA_8888 )
    {       __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,"Bitmap format is not RGBA_8888!");
        return NULL;
    }
    
    if ((ret = AndroidBitmap_lockPixels(env, bitmap, &pixels)) < 0) {
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,"AndroidBitmap_lockPixels() failed ! error=%d", ret);
    }
    
    // init our output image
    Mat mbgra(info.height, info.width, CV_8UC4, pixels);
    //Mat dst = scan(mbgra,x1,y1,x2,y2,x3,y3,x4,y4);

    //compute brightness
    //find mean pixel values for all channels separately
    Scalar meanPxl = mean(mbgra);

    brightnessValues.push_back(meanPxl.val[1]);

    LOGI("Brightness value for frame: %d", frameCount);
    LOGI("Image brightness: %f", meanPxl.val[1]);
    LOGI("brightness value from vector: %f", brightnessValues[frameCount]);

    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Image brightness: %f", meanPxl.val[1]);

    //get source bitmap's config
    jclass java_bitmap_class = (jclass)env->FindClass("android/graphics/Bitmap");
    jmethodID mid = env->GetMethodID(java_bitmap_class, "getConfig", "()Landroid/graphics/Bitmap$Config;");
    jobject bitmap_config = env->CallObjectMethod(bitmap, mid);
    jobject _bitmap = mat_to_bitmap(env,mbgra,false,bitmap_config);

    Mat gray(info.height, info.width, CV_8UC1);
    cvtColor(mbgra, gray, CV_BGRA2GRAY);
    feat.provideFrame(gray, timestamp);

    framesTimestamps.push_back(Point(frameCount, timestamp));

    frameCount++;

    if(frameCount == 20)
    {
        if(!yamlFileName.empty())
        {
            //const char* fnameptr = env->SetStringUTFChars
            const char * yamlfilenameptr = yamlFileName.c_str();
            LOGD("Writing to yamlfile: %s", yamlfilenameptr);

            feat.WriteToFile(yamlFileName);
        }
        else
            LOGD("YAML Filename empty string");
    }

    AndroidBitmap_unlockPixels(env, bitmap);
    return _bitmap;
}


//function to write brightness values to yaml file --- input required jFilePath is String containing path to yaml file including
// name of file and extension .yaml where yaml file can be written
JNIEXPORT void JNICALL Java_com_example_android_mediarecorder_MainActivity_WriteBrightnessToYAML(JNIEnv* env, jobject thiz,
                                                                                                 jstring jFilePath)
{
        //filename to save to
        const char *fnameptr = env->GetStringUTFChars(jFilePath, NULL);

        string yamlFileName(fnameptr);

        if(!brightnessValues.empty())
        {
            FileStorage fs(yamlFileName, FileStorage::WRITE);

            fs << "brightnessValues" << brightnessValues;
            fs.release();

            LOGD("Brightness values written to yaml file: %s", fnameptr);
            //LOGD(yamlFileName);
        }
        else
            LOGI("No brightness values found to write to yaml file");

        //empty brightness values
        brightnessValues.clear();
        frameCount = 0;
        //release char pointer
        env->ReleaseStringUTFChars(jFilePath, fnameptr);
}


JNIEXPORT jobject JNICALL Java_com_example_android_mediarecorder_MainActivity_callInit(JNIEnv *env, jobject thiz, jint width,
                                                                                jint height, jfloat fps, jfloat windowSizeInSec,
                                                                                jstring jFilePath)
{
       LOGI("features init called");
       //call init
       feat.init(height, width, fps, windowSizeInSec);

       //filename to save to
       const char *fnameptr = env->GetStringUTFChars(jFilePath, NULL);

       string fileName(fnameptr);
       yamlFileName = fileName;
       LOGI("yaml file name set to: %s", fnameptr);

}